// <auto-generated />
using System;
using BoostIK.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BoostIK.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221024220745_update")]
    partial class update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BoostIK.CORE.Entities.Company", b =>
                {
                    b.Property<Guid>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("MembershipEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("MersisNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradeName")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebsiteAdress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyID");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasFilter("[ManagerId] IS NOT NULL");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            Adress = "Caferağa, Mühürdar Cd. No:76, 34710 Kadıköy/İstanbul",
                            City = 34,
                            CompanyName = "BilgeAdam",
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 352, DateTimeKind.Local).AddTicks(8800),
                            LogoPath = "images/account-add-photo.svg",
                            MailExtension = "@bilgeadam.com",
                            MembershipEnd = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            TradeName = 0
                        });
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.DayOffRequest", b =>
                {
                    b.Property<Guid>("DayOffRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndHour")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("HourCount")
                        .HasColumnType("float");

                    b.Property<int>("PermissionID")
                        .HasColumnType("int");

                    b.Property<string>("PersonelID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefuseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartHour")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DayOffRequestID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("PermissionID");

                    b.HasIndex("PersonelID");

                    b.ToTable("DayOffRequests");

                    b.HasData(
                        new
                        {
                            DayOffRequestID = new Guid("398c3f95-93ef-4fd7-a7e3-83c68ee1cc22"),
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 355, DateTimeKind.Local).AddTicks(397),
                            DayCount = 10,
                            Description = "kafa dinlemek için izin istiyorum nolur verin",
                            EndDate = new DateTime(2022, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionID = 1,
                            PersonelID = "76cd1492-a593-4e7c-a1fa-5fe5677d6a99",
                            RestType = 1,
                            StartDate = new DateTime(2022, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = 1,
                            Status = true
                        });
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Department", b =>
                {
                    b.Property<Guid>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentID = new Guid("ec417f09-33f0-4ad7-b9f1-2631f6b0e442"),
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 352, DateTimeKind.Local).AddTicks(8800),
                            Name = "İnsan Kaynakları",
                            Status = true
                        });
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyUnit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonelID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefuseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("PersonelID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("MaxDayCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PermissionID");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionID = 1,
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(6392),
                            Gender = 3,
                            MaxDayCount = 365,
                            Name = "Yıllık İzin",
                            Status = true
                        },
                        new
                        {
                            PermissionID = 2,
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(7435),
                            Gender = 3,
                            MaxDayCount = 365,
                            Name = "Ücretsiz İzin",
                            Status = true
                        },
                        new
                        {
                            PermissionID = 3,
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(7441),
                            Gender = 3,
                            MaxDayCount = 3,
                            Name = "Mazeret İzni",
                            Status = true
                        },
                        new
                        {
                            PermissionID = 4,
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(7443),
                            Gender = 3,
                            MaxDayCount = 20,
                            Name = "Hastalık İzni",
                            Status = true
                        },
                        new
                        {
                            PermissionID = 5,
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(7445),
                            Gender = 1,
                            MaxDayCount = 56,
                            Name = "Doğum İzni",
                            Status = true
                        },
                        new
                        {
                            PermissionID = 6,
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(7447),
                            Gender = 1,
                            MaxDayCount = 56,
                            Name = "Doğum Sonrası İzni",
                            Status = true
                        },
                        new
                        {
                            PermissionID = 7,
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(7449),
                            Gender = 3,
                            MaxDayCount = 3,
                            Name = "Vefat İzni",
                            Status = true
                        },
                        new
                        {
                            PermissionID = 8,
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(7450),
                            Gender = 3,
                            MaxDayCount = 3,
                            Name = "Evlilik İzni",
                            Status = true
                        },
                        new
                        {
                            PermissionID = 9,
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(7452),
                            Gender = 2,
                            MaxDayCount = 30,
                            Name = "Askerlik İzni",
                            Status = true
                        },
                        new
                        {
                            PermissionID = 10,
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(7454),
                            Gender = 2,
                            MaxDayCount = 5,
                            Name = "Babalık İzni",
                            Status = true
                        },
                        new
                        {
                            PermissionID = 11,
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(7456),
                            Gender = 2,
                            MaxDayCount = 4,
                            Name = "Yol İzni",
                            Status = true
                        },
                        new
                        {
                            PermissionID = 12,
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(7512),
                            Gender = 2,
                            MaxDayCount = 999,
                            Name = "Saatlik",
                            Status = true
                        });
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.PermissionLimit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxDayCount")
                        .HasColumnType("int");

                    b.Property<int>("PermissionID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("PermissionID");

                    b.ToTable("PermissionLimits");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(8575),
                            MaxDayCount = 365,
                            PermissionID = 1,
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(8936),
                            MaxDayCount = 365,
                            PermissionID = 2,
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(8940),
                            MaxDayCount = 3,
                            PermissionID = 3,
                            Status = true
                        },
                        new
                        {
                            ID = 4,
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(8941),
                            MaxDayCount = 20,
                            PermissionID = 4,
                            Status = true
                        },
                        new
                        {
                            ID = 5,
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(8943),
                            MaxDayCount = 56,
                            PermissionID = 5,
                            Status = true
                        },
                        new
                        {
                            ID = 6,
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(8945),
                            MaxDayCount = 56,
                            PermissionID = 6,
                            Status = true
                        },
                        new
                        {
                            ID = 7,
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(8946),
                            MaxDayCount = 3,
                            PermissionID = 7,
                            Status = true
                        },
                        new
                        {
                            ID = 8,
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(8948),
                            MaxDayCount = 3,
                            PermissionID = 8,
                            Status = true
                        },
                        new
                        {
                            ID = 9,
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(8950),
                            MaxDayCount = 30,
                            PermissionID = 9,
                            Status = true
                        },
                        new
                        {
                            ID = 10,
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(8951),
                            MaxDayCount = 5,
                            PermissionID = 10,
                            Status = true
                        },
                        new
                        {
                            ID = 11,
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(8953),
                            MaxDayCount = 4,
                            PermissionID = 11,
                            Status = true
                        });
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Personel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AnnualLeave")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BloodGroup")
                        .HasColumnType("int");

                    b.Property<int?>("ChildrenCount")
                        .HasColumnType("int");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<Guid?>("CompanyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DegreeOfDisability")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DismissalDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EducationLevel")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmergencyPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPersonPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .HasMaxLength(26)
                        .HasColumnType("nvarchar(26)");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonelMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RemaningAnnualLeave")
                        .HasColumnType("int");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpouseEmploymentState")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("WorkStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isPasswordChanged")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "76cd1492-a593-4e7c-a1fa-5fe5677d6a99",
                            AccessFailedCount = 0,
                            Adress = "Acıbadem Mah. Çeçen Sk. No:25, 34660 Üsküdar",
                            AnnualLeave = 14,
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodGroup = 6,
                            City = 34,
                            CompanyID = new Guid("5f1bf6a6-4a1f-410f-a07b-dc7dcd50a19b"),
                            ConcurrencyStamp = "813ac1a9-6bac-4915-9ac8-6eba581ecba0",
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 353, DateTimeKind.Local).AddTicks(8516),
                            DepartmentID = new Guid("ec417f09-33f0-4ad7-b9f1-2631f6b0e442"),
                            EducationLevel = 5,
                            Email = "beyazvesen@gmail.com",
                            EmailConfirmed = false,
                            EmergencyPerson = "Burak Kut",
                            EmergencyPersonPhone = "5546663354",
                            FirstName = "Rober",
                            Gender = 2,
                            IBAN = "TR330006100519786457841326",
                            IdentificationNumber = "01234567899",
                            ImagePath = "/images/users/256_rsz_1andy-lee-642320-unsplash.jpg",
                            IsWorking = true,
                            LastName = "Hatemo",
                            LockoutEnabled = false,
                            MaritalStatus = 1,
                            MobilePhone = "+905322563232",
                            NormalizedEmail = "BEYAZVESEN@GMAIL.COM",
                            NormalizedUserName = "BEYAZVESEN@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEKpyrdvmsPkODSCAljhCSJMJlvzQ/Mrbvkhxm4RP1kbHKFepD7AUAIs96OG40roakw==",
                            PersonelMail = "beyazvesen@gmail.com",
                            PhoneNumberConfirmed = false,
                            Position = "Uzman Yardımcısı",
                            PostCode = "34335",
                            RemaningAnnualLeave = 7,
                            Salary = 10000m,
                            SecurityStamp = "614ce7c3-13e5-45e3-bbd2-0ca7135e60d9",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "beyazvesen@gmail.com",
                            WorkStartDate = new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isPasswordChanged = false
                        },
                        new
                        {
                            Id = "91e897d3-8ff7-4ce6-af2a-b5195f8d6f4e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bddb7c97-7a78-446d-ac4c-e687e5f8a6e9",
                            CreationDate = new DateTime(2022, 10, 25, 1, 7, 45, 354, DateTimeKind.Local).AddTicks(5165),
                            Email = "admin@ikmerkezim.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            ImagePath = "/images/users/account-add-photo.svg",
                            IsWorking = true,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IKMERKEZIM.COM",
                            NormalizedUserName = "ADMIN@IKMERKEZIM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKpyrdvmsPkODSCAljhCSJMJlvzQ/Mrbvkhxm4RP1kbHKFepD7AUAIs96OG40roakw==",
                            PhoneNumber = "04542121212",
                            PhoneNumberConfirmed = false,
                            Position = "Site Yöneticisi",
                            SecurityStamp = "7ac3ec9a-20ab-42d0-896e-93f1747c971d",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "admin@ikmerkezim.com",
                            isPasswordChanged = false
                        });
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Spending", b =>
                {
                    b.Property<Guid>("SpendingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyUnit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonelID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefuseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SpendingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TypeOfSpending")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SpendingID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("PersonelID");

                    b.ToTable("Spendings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "391423bb-a16c-45bb-97c7-1862bc1a38ca",
                            ConcurrencyStamp = "9c77d58b-a069-4b44-aa89-780b0c40c60f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "51a1fe7e-6e21-4adb-96ab-edfea9a93e15",
                            ConcurrencyStamp = "8ed6cd99-7b06-4901-8ec5-d2f3fadd36b6",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "10904629-caf7-4409-b6a9-324001fb85e5",
                            ConcurrencyStamp = "777c3d2e-89a9-4e99-8dca-0d2421ed2709",
                            Name = "Personel",
                            NormalizedName = "PERSONEL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "91e897d3-8ff7-4ce6-af2a-b5195f8d6f4e",
                            RoleId = "391423bb-a16c-45bb-97c7-1862bc1a38ca"
                        },
                        new
                        {
                            UserId = "76cd1492-a593-4e7c-a1fa-5fe5677d6a99",
                            RoleId = "10904629-caf7-4409-b6a9-324001fb85e5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Company", b =>
                {
                    b.HasOne("BoostIK.CORE.Entities.Personel", "Manager")
                        .WithOne()
                        .HasForeignKey("BoostIK.CORE.Entities.Company", "ManagerId")
                        .HasConstraintName("FK_COMPANY_MANAGER");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.DayOffRequest", b =>
                {
                    b.HasOne("BoostIK.CORE.Entities.Company", "Company")
                        .WithMany("DayoffRequests")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoostIK.CORE.Entities.Permission", "Permission")
                        .WithMany("DayOffRequests")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoostIK.CORE.Entities.Personel", "Personel")
                        .WithMany("DayOffRequests")
                        .HasForeignKey("PersonelID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Permission");

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Department", b =>
                {
                    b.HasOne("BoostIK.CORE.Entities.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Payment", b =>
                {
                    b.HasOne("BoostIK.CORE.Entities.Company", "Company")
                        .WithMany("Payments")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoostIK.CORE.Entities.Personel", "Personel")
                        .WithMany("Payments")
                        .HasForeignKey("PersonelID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.PermissionLimit", b =>
                {
                    b.HasOne("BoostIK.CORE.Entities.Company", "Company")
                        .WithMany("PermissionLimits")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoostIK.CORE.Entities.Permission", "Permission")
                        .WithMany("PermissionLimits")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Personel", b =>
                {
                    b.HasOne("BoostIK.CORE.Entities.Company", "Company")
                        .WithMany("Personels")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BoostIK.CORE.Entities.Department", "Department")
                        .WithMany("Personels")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Spending", b =>
                {
                    b.HasOne("BoostIK.CORE.Entities.Company", "Company")
                        .WithMany("Spendings")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoostIK.CORE.Entities.Personel", "Personel")
                        .WithMany("Spendings")
                        .HasForeignKey("PersonelID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BoostIK.CORE.Entities.Personel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoostIK.CORE.Entities.Personel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoostIK.CORE.Entities.Personel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoostIK.CORE.Entities.Personel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Company", b =>
                {
                    b.Navigation("DayoffRequests");

                    b.Navigation("Departments");

                    b.Navigation("Payments");

                    b.Navigation("PermissionLimits");

                    b.Navigation("Personels");

                    b.Navigation("Spendings");
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Department", b =>
                {
                    b.Navigation("Personels");
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Permission", b =>
                {
                    b.Navigation("DayOffRequests");

                    b.Navigation("PermissionLimits");
                });

            modelBuilder.Entity("BoostIK.CORE.Entities.Personel", b =>
                {
                    b.Navigation("DayOffRequests");

                    b.Navigation("Payments");

                    b.Navigation("Spendings");
                });
#pragma warning restore 612, 618
        }
    }
}
